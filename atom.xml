<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerek的code world</title>
  
  
  <link href="https://alcuin1.github.io/atom.xml" rel="self"/>
  
  <link href="https://alcuin1.github.io/"/>
  <updated>2024-03-10T02:23:48.280Z</updated>
  <id>https://alcuin1.github.io/</id>
  
  <author>
    <name>jerek</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务上云学习笔记(1)</title>
    <link href="https://alcuin1.github.io/2024/03/10/%E6%9C%8D%E5%8A%A1%E4%B8%8A%E4%BA%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://alcuin1.github.io/2024/03/10/%E6%9C%8D%E5%8A%A1%E4%B8%8A%E4%BA%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</id>
    <published>2024-03-10T02:09:09.000Z</published>
    <updated>2024-03-10T02:23:48.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务上云学习"><a href="#服务上云学习" class="headerlink" title="服务上云学习"></a>服务上云学习</h1><p>最近学习了一门课，讲的是服务上云，后台服务上云需要关注地方有很多：高可用、高并发、安全性、可运维性等等，具体如下图所示：</p><p>图一：</p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><h3 id="诱因"><a href="#诱因" class="headerlink" title="诱因"></a>诱因</h3><ul><li>内部：代码问题、配置问题、性能问题</li><li>外部：网络故障、机房故障（电力、制冷）、服务器故障、基础组件故障、依赖服务故障、运维操作失误、恶意攻击</li></ul><h3 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h3><ul><li>指标：MTBF平均无故障时间、MTTR平均故障恢复时间、</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务上云学习&quot;&gt;&lt;a href=&quot;#服务上云学习&quot; class=&quot;headerlink&quot; title=&quot;服务上云学习&quot;&gt;&lt;/a&gt;服务上云学习&lt;/h1&gt;&lt;p&gt;最近学习了一门课，讲的是服务上云，后台服务上云需要关注地方有很多：高可用、高并发、安全性、可运维性等等，具体</summary>
      
    
    
    
    <category term="后台" scheme="https://alcuin1.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
    <category term="上云" scheme="https://alcuin1.github.io/tags/%E4%B8%8A%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>一些思考</title>
    <link href="https://alcuin1.github.io/2024/02/02/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://alcuin1.github.io/2024/02/02/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</id>
    <published>2024-02-02T04:32:48.000Z</published>
    <updated>2024-02-02T05:42:25.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试要点：如何判断面试者的真实水平？"><a href="#面试要点：如何判断面试者的真实水平？" class="headerlink" title="面试要点：如何判断面试者的真实水平？"></a>面试要点：如何判断面试者的真实水平？</h2><p>首先，从源头抓起。简历筛选的过程要保障候选人和岗位的强匹配性，面试过程我们可以用简历中的<strong>项目过程</strong>、用到的<strong>关键技术</strong>、如何解决最棘手的技术问题，来考察项目真实性，对相关技术栈的系统性使用，以及是否真正独立解决过实际问题等方面。</p><p>在面试沟通时，我们尽量用领域内的<strong>开放性问题</strong>，比如前端领域里的，当时某个项目为什么用 React？如果不是自己选的，那你现在觉得好处和缺点分别是什么等等；也可以根据他当时解决棘手问题的方法去深挖<strong>技术细节</strong>。在这个过程中尽量让候选人多讲，当然也要把控节奏，不能让候选人漫无目的地发散。通过聆听候选人的讲述，还是比较容易判断候选人是否真实做过该项目，以及相关技术深度和广度的，另外还可以了解候选人的技术热情和学习能力。</p><p>从结构化校对来看，我会从学习、成长背景，实际工作、项目经历，主导设计了什么系统或者解决了什么技术难点几个方面来考察岗位相关的技术栈水平，中间的提问可以结合当前自己公司遇到的一些困难来举例，不一定要很精准的回答，主要是设想一下如果他入职后来解决这些困难，我们是否比较放心。</p><p>多数情况下，我们需要根据岗位的性质做一些取舍。比如有些岗位的特性决定了技术能力非常重要或者市场上能达到技术要求的候选人非常少，那我们就得接受难以管理的候选人（例如傲慢，难以沟通，懒散等等）的高管理成本。</p><p>像业务研发团队可能对技术深度要求没那么高，但对技术广度的要求比较高，因此在工作中，个性上是要能够接受长时间重复工作且任劳任怨的人。如果工作时的业务价值导向不明显，想要极具技术创新性，那么在一个稳定输出的业务技术团队就有可能“破坏”团队文化，把业务价值第一的团队带偏到以技术创新为主。</p><p>针对招聘时的人才观，不能要求全才，只要能匹配团队，能给公司产出价值的就可以。</p><p>如果从技术管理者的视角来看，其必须掌控自己团队的技术方向，能明确技术发展方向，同时也清楚知道自己团队当前的技术短板和优势，这样才能对预期的候选人画像心里有数，而不是临场来确定我到底要什么样的人才。</p><h2 id="如何看待技术、业务、能力呢？"><a href="#如何看待技术、业务、能力呢？" class="headerlink" title="如何看待技术、业务、能力呢？"></a>如何看待技术、业务、能力呢？</h2><p>业务 &amp; 产品侧、技术改造、紧急的线上问题、效能提升几个方面</p><p>在业务驱动的项目中，特别是一些业务比较复杂的下项目，比如，金融系统、银行系统、财务系统、清结算系统、物流系统等，我们还可以积累一些业务壁垒。如果你之前的工作都是从事偏向业务系统的开发，靠技术只能面到阿里 P7 这个层级。如果想面到阿里的 P8、P9，靠的就不仅仅只是技术了，还需要对某个业务的深入积累。实际上，很多领导之所以能做领导，不是技术牛逼，而是对业务熟悉。</p><p><strong>不过，并不是所有的业务系统开发，业务都有足够的复杂度，可以让你积累竞争壁垒。对于技术没有太大挑战，业务也不复杂的项目开发，我们可以多积累自己的能力。</strong></p><p>这里所说的能力，指的是成事能力、解决问题的能力。实际上，很多问题的解决，即便是技术问题的解决，靠的都不是技术，而是一个人最基本的解决问题的能力。这其中就包括分析总结能力、逻辑思维能力、沟通协调能力、自我驱动能力等等。</p><p>实际上，比起短短的 1 个小时的面试，我个人也更倾向于通过学历、项目（项目经历是否有技术难度）、履历（是否有知名公司的工作经历、以及职位高低），这些过去的能够证明能力的经历来判断一个候选人。特别是对于一些中高端的岗位，好的学历、项目、履历基本上有碾压性的优势。我自己做面试官多年，基本上在看完候选人的简历之后，对符不符合我们招聘要求，心里就有个八九不离十的判断了。在面试开始的前 10 分钟，我基本上已经决定要不要录用他了。后面的面试只是为了进一步证实自己刚刚的决定而已。</p><p>如果说<strong>技术、业务、能力</strong>是程序员的立命之本，它们决定了你能不能在职场这场比赛中胜出，那<strong>学历、项目、履历</strong>就是入场门票，决定了你可以选择哪个比赛赛道，是 Google、Facebook，还是 BAT，又或者是完全不知名的小公司。</p><p>所以，在夯实技术、业务、能力的同时，你也要学会“面向简历打工”“面向跳槽打工”，提前做一些职业规划，把自己的履历弄好看点，比如，学历太低的就去考个好点的学历，在公司内部努力去选择做一些有技术含量的项目，跳槽去一些知名点的互联网公司等等。</p><h3 id="不要让职场软技能成为短板"><a href="#不要让职场软技能成为短板" class="headerlink" title="不要让职场软技能成为短板"></a>不要让职场软技能成为短板</h3><p>总的来讲，要想职场混得好，一些必须的沟通、协作、总结汇报等软技能还是不能忽视的，当然，我也不是推崇，纯靠“耍手段”上位。我只是觉得，这方面起码不能成为你的短板，不要让这些非技术、非能力的因素，阻碍了你职场的发展</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>极客时间-技术领导力实战 招兵买马：如何判断候选人与岗位的匹配程度？</p><p>极客时间-技术领导力实战 从任务分配角度来看管理</p><p>极客时间-设计模式之美-加餐8 程序员怎么才能让自己走得更高、更远？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;面试要点：如何判断面试者的真实水平？&quot;&gt;&lt;a href=&quot;#面试要点：如何判断面试者的真实水平？&quot; class=&quot;headerlink&quot; title=&quot;面试要点：如何判断面试者的真实水平？&quot;&gt;&lt;/a&gt;面试要点：如何判断面试者的真实水平？&lt;/h2&gt;&lt;p&gt;首先，从源头</summary>
      
    
    
    
    <category term="复盘" scheme="https://alcuin1.github.io/categories/%E5%A4%8D%E7%9B%98/"/>
    
    
    <category term="复盘" scheme="https://alcuin1.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>小谈一下</title>
    <link href="https://alcuin1.github.io/2024/01/05/%E5%B0%8F%E8%B0%88%E4%B8%80%E4%B8%8B/"/>
    <id>https://alcuin1.github.io/2024/01/05/%E5%B0%8F%E8%B0%88%E4%B8%80%E4%B8%8B/</id>
    <published>2024-01-05T14:29:34.000Z</published>
    <updated>2024-01-07T02:15:52.500Z</updated>
    
    <content type="html"><![CDATA[<p>实践与理论</p><p>过度优化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实践与理论&lt;/p&gt;
&lt;p&gt;过度优化&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="https://alcuin1.github.io/2024/01/05/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://alcuin1.github.io/2024/01/05/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2024-01-05T05:32:01.000Z</published>
    <updated>2024-01-05T05:40:18.219Z</updated>
    
    <content type="html"><![CDATA[<p>首先上<a href="https://markdown.com.cn/basic-syntax/">官方参考链接</a></p><p>其次简单使用一下常用的有哪些</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先上&lt;a href=&quot;https://markdown.com.cn/basic-syntax/&quot;&gt;官方参考链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其次简单使用一下常用的有哪些&lt;/p&gt;
</summary>
      
    
    
    
    <category term="markdown" scheme="https://alcuin1.github.io/categories/markdown/"/>
    
    
    <category term="markdown" scheme="https://alcuin1.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://alcuin1.github.io/2024/01/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://alcuin1.github.io/2024/01/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-01-05T05:21:46.000Z</published>
    <updated>2024-01-14T02:28:48.654Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://telegraph-image-5gr.pages.dev/file/8d9fb7979c933de38b530.jpg" alt="tidy desk"></p><h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><h2 id="基本操作流程"><a href="#基本操作流程" class="headerlink" title="基本操作流程"></a>基本操作流程</h2><p><img src="https://telegraph-image-5gr.pages.dev/file/eb5fa975f8bb365a078e9.png" alt="git"></p><p>常用命令以及开发顺序如下：</p><p><code>git clone git链接, git init  , git pull, git branch -b newBranch，git status, git add ., git commit -m &quot;your commit message&quot;</code></p><p><code>git push --set-upstream origin feat_new,  git push, git merge master</code></p><h2 id="配置config信息"><a href="#配置config信息" class="headerlink" title="配置config信息"></a>配置config信息</h2><p><code>git config (--global) user.name &quot;xxx&quot; git config (--global) user.email &quot;xx@163.com&quot;</code></p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>在任何当前工作的 Git 仓库中，每个文件都是这样的：</p><ul><li><strong>追踪的（tracked）</strong>- 这些是 Git 所知道的所有文件或目录。这些是新添加（用 <code>git add</code> 添加）和提交（用 <code>git commit</code> 提交）到主仓库的文件和目录。</li><li><strong>未被追踪的（untracked）</strong> - 这些是在工作目录中创建的，但还没有被暂存（或用 <code>git add</code> 命令添加）的任何新文件或目录。</li><li><strong>被忽略的（ignored）</strong> - 这些是 Git 知道的要全部排除、忽略或在 Git 仓库中不需要注意的所有文件或目录。本质上，这是一种告诉 Git 哪些未被追踪的文件应该保持不被追踪并且永远不会被提交的方法。</li></ul><p>所有被忽略的文件都会被保存在一个 <code>.gitignore</code> 文件中。</p><p><code>.gitignore</code> 文件是一个纯文本文件，包含了项目中所有指定的文件和文件夹的列表，这些文件和文件夹是 Git 应该忽略和不追踪的。</p><p>在 <code>.gitignore</code> 中，你可以通过提及特定文件或文件夹的名称或模式来告诉 Git 只忽略一个文件或一个文件夹。你也可以用同样的方法告诉 Git 忽略多个文件或文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 名字前面有点（.）的文件默认是隐藏的。</span><br><span class="line"># 忽略根目录下的text.txt文件</span><br><span class="line">/text.txt</span><br><span class="line"># 忽略一个位于根目录下的 test 目录中的 text.txt 文件</span><br><span class="line">/test/text.txt</span><br><span class="line"># 或者</span><br><span class="line">test/text.txt</span><br><span class="line"># 忽略位于项目中任何地方的具有该特定名称的所有文件 text.txt 文件</span><br><span class="line">text.txt</span><br><span class="line"># 要忽略整个目录及其所有内容，你需要包括目录的名称，并在最后加上斜线 /：</span><br><span class="line">test/</span><br><span class="line"># 匹配任何名字带有 test 的文件和目录</span><br><span class="line">test</span><br><span class="line"># 忽略所有名称以 img 开头的文件和目录</span><br><span class="line">img*</span><br><span class="line"># 忽略所有以 .md 文件扩展名结尾的 markdown 文件</span><br><span class="line">*.md</span><br><span class="line"># 假设忽略所有以 .md 结尾的文件，但不希望 Git 忽略一个 README.md 文件</span><br><span class="line"># 忽略所有 .md 文件</span><br><span class="line">.md</span><br><span class="line"># 不忽略 README.md 文件</span><br><span class="line">!README.md</span><br><span class="line"></span><br><span class="line"># 给 .gitignore 添加 .env 文件</span><br><span class="line">echo &quot;.env&quot; &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure><h3 id="不生效怎么办？"><a href="#不生效怎么办？" class="headerlink" title="不生效怎么办？"></a>不生效怎么办？</h3><p>修改.gitignore之后不生效？</p><p>原因：只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，修改.gitignore是无效的。</p><p>解决方法：删除本地缓存，改变为未track状态，再commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br></pre></td></tr></table></figure><h2 id="修改上一次提交"><a href="#修改上一次提交" class="headerlink" title="修改上一次提交"></a>修改上一次提交</h2><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令来重新提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &#x27;initial commit&#x27;</span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit --amend</span><br><span class="line">$ git push -f (强制提交)</span><br></pre></td></tr></table></figure><p>最终你只会有一个提交——第二次提交将代替第一次提交的结果</p><h2 id="Cherry-pick"><a href="#Cherry-pick" class="headerlink" title="Cherry-pick"></a>Cherry-pick</h2><p>挑选其他分支的几个commitid，然后切换到目标分支</p><p>git checkout target_branch</p><p>复制commitid</p><p>git cherry-pick commitid 1 commitid2 … </p><p>然后目标分支会出现如下新的提交记录，按照commit1id1 和commitid 2顺序进行先后提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">自动合并 main.go</span><br><span class="line">[master_tmp f29a5a5] 2</span><br><span class="line"> Date: Tue Jan 9 10:40:27 2024 +0800</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[master_tmp 36ddf9f] 1</span><br><span class="line"> Date: Tue Jan 9 10:58:09 2024 +0800</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2><p><a href="http://jartto.wang/2018/12/11/git-rebase/">参考</a></p><p>基于master分支开出新的分支feature1进行开发</p><p>但是同时也是同样基于master分支拉出一条新的分支feature2开发，而且比你先合并到master，这时候我们可以选择merge（不符主题），也可以选择rebase</p><p>git checkout feature1</p><p>git rebase master 即可实现变基操作，然后开发完之后即可进行merge到master分支即可</p><h3 id="rebase-–onto"><a href="#rebase-–onto" class="headerlink" title="rebase –onto"></a>rebase –onto</h3><p>如果需要将一个分支的几个提交，迁移到另外一个分支应该如何做呢？(所有的提交最好不要有冲突，最好不要出现修改同一处地方)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">branch1</span><br><span class="line">commit 8f18ef28</span><br><span class="line">4</span><br><span class="line">commit 4b437925</span><br><span class="line">3</span><br><span class="line">commit 20d8159e</span><br><span class="line">2</span><br><span class="line">commit 2fd34b83</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">branch2</span><br><span class="line">commit 55ab6cd6</span><br><span class="line">xxxxxx(这不重要)</span><br></pre></td></tr></table></figure><p>移动newbranch上的某几个commitid到最新的commitid到某个分支上 </p><p>语法：git rebase –onto target_branch commitid1 commitid2 (前开后闭，即不包含commitid1到commitid2)，下面一行例子就是移动提交3和4到目标分支</p><p>git rebase –onto master_tmp 20d8159e 8f18ef28 </p><p>现在会出现分离，然后生成新的分离分支：8f50335</p><p>也可以将其保存到新的分支，合并其分支到目标分支也可 git checkout -b newBranch </p><p>切换到目标分支，并且合并新的分支过来即可</p><p>git checkout master_tmp </p><p>git merge 8f50335</p><p>结果就是：</p><p>branch2</p><p>commit 8f18ef28<br>4<br>commit 4b437925<br>3</p><p>commit 55ab6cd6<br>xxxxxx(这不重要)</p><h3 id="rebase-i-怎么用？"><a href="#rebase-i-怎么用？" class="headerlink" title="rebase -i 怎么用？"></a>rebase -i 怎么用？</h3><p>git rebase -i &lt;起始commit id&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 命令:</span><br><span class="line"># p, pick &lt;提交&gt; = 使用提交</span><br><span class="line"># r, reword &lt;提交&gt; = 使用提交，但编辑提交说明</span><br><span class="line"># e, edit &lt;提交&gt; = 使用提交，但停止以便修补提交</span><br><span class="line"># s, squash &lt;提交&gt; = 使用提交，但挤压到前一个提交</span><br><span class="line"># f, fixup [-C | -c] &lt;提交&gt; = 类似于 &quot;squash&quot;，但只保留前一个提交</span><br><span class="line">#                    的提交说明，除非使用了 -C 参数，此情况下则只</span><br><span class="line">#                    保留本提交说明。使用 -c 和 -C 类似，但会打开</span><br><span class="line">#                    编辑器修改提交说明</span><br><span class="line"># x, exec &lt;命令&gt; = 使用 shell 运行命令（此行剩余部分）</span><br><span class="line"># b, break = 在此处停止（使用 &#x27;git rebase --continue&#x27; 继续变基）</span><br><span class="line"># d, drop &lt;提交&gt; = 删除提交</span><br><span class="line"># l, label &lt;label&gt; = 为当前 HEAD 打上标记</span><br><span class="line"># t, reset &lt;label&gt; = 重置 HEAD 到该标记</span><br><span class="line"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span><br><span class="line"># .       创建一个合并提交，并使用原始的合并提交说明（如果没有指定</span><br><span class="line"># .       原始提交，使用注释部分的 oneline 作为提交说明）。使用</span><br><span class="line"># .       -c &lt;提交&gt; 可以编辑提交说明。</span><br><span class="line"># u, update-ref &lt;引用&gt; = 为引用 &lt;ref&gt; 设置一个占位符，以将该引用更新为此处的新提交。</span><br><span class="line">#                       此 &lt;引用&gt; 在变基结束后更新。</span><br><span class="line">#</span><br><span class="line"># 可以对这些行重新排序，将从上至下执行。</span><br><span class="line">#</span><br><span class="line"># 如果您在这里删除一行，对应的提交将会丢失。</span><br><span class="line">#</span><br><span class="line"># 然而，如果您删除全部内容，变基操作将会终止。</span><br></pre></td></tr></table></figure><h2 id="Squash"><a href="#Squash" class="headerlink" title="Squash"></a>Squash</h2><p>在git rebase -i 中将需要压缩的提交改为s即可压缩为一个commit，然后merge到master</p><h2 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h2><h3 id="git-reset-与git-revert的区别"><a href="#git-reset-与git-revert的区别" class="headerlink" title="git reset 与git revert的区别"></a>git reset 与git revert的区别</h3><p>Git reset 会把回退版本之后的修改都删除掉，要从第四次修改回退到第一次修改，那么会删除中间第二、三、四次的修改。</p><p>那么如果发现第三次有错误，想要恢复第三次修改，但是要保留第四次修改呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert -n commitid(要恢复的第三次修改提交id)</span><br><span class="line">git commit -m &quot;恢复第三次修改&quot;</span><br></pre></td></tr></table></figure><p>git历史提交会多出来一个revert的提交记录，因为产生了一个新的commit_id。这比较适合多人开发环境，因为不能影响别人的提交。</p><p>如果是在本地的分支呢？那就可以使用git reset命令。</p><p>回退到上个版本 git reset commitid，但是修改的痕迹，即代码改动仍在你的工作区，只不过之后的commit记录(本地仓库记录)都不存在了。可以自行决定是否保留或者修改。加上–hard的话，就说明工作区里面的改动也不要了。</p><p>比如：</p><p>回退到某个912smd2提交的版本 git reset 912smd2 </p><p>回退到上个版本git reset –hard HEAD^ </p><p>回退到上上个版本git reset –hard HEAD^^</p><h2 id="Push到远程之后如何删除提交记录呢？"><a href="#Push到远程之后如何删除提交记录呢？" class="headerlink" title="Push到远程之后如何删除提交记录呢？"></a>Push到远程之后如何删除提交记录呢？</h2><p>假设有如下提交记录：<br>$ git log<br>cf8f080 (HEAD -&gt; master, origin&#x2F;master) commit 3<br>92b3abb commit 2<br>f38f353 commit 1<br>2df3c7c Initial commit</p><p>假设我们要删除92b3abb commit 2和cf8f080 commit 3 两个提交，就是说commit 2和commit 3都不要了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin +92b3abb^:git_tmp</span><br></pre></td></tr></table></figure><p>92b3abb^：表示只保留92b3abb的前一次提交，从92b3abb开始到后面的提交都不要了。<br>+：表示强制 non-fastforward push</p><h2 id="如何取消已经追踪过文件的改动呢？（reset到某个版本，git-checkout-仍无法删除）"><a href="#如何取消已经追踪过文件的改动呢？（reset到某个版本，git-checkout-仍无法删除）" class="headerlink" title="如何取消已经追踪过文件的改动呢？（reset到某个版本，git checkout .仍无法删除）"></a>如何取消已经追踪过文件的改动呢？（reset到某个版本，git checkout .仍无法删除）</h2><p><a href="https://www.cnblogs.com/lsgxeva/p/15731913.html">https://www.cnblogs.com/lsgxeva/p/15731913.html</a></p><p>git clean -n 查看将要删除的文件</p><p>git clean -f 强行删除文件</p><h2 id="如何删除commit提交记录"><a href="#如何删除commit提交记录" class="headerlink" title="如何删除commit提交记录"></a>如何删除commit提交记录</h2><p>删除 commit 的三种方法 <a href="https://www.jianshu.com/p/c9f131e22a60">https://www.jianshu.com/p/c9f131e22a60</a></p><p>git reset commitID 回到某次提交</p><p>git reset –soft 此次提交之后的修改会被退回到暂存区</p><p>git reset –hard：此次提交之后的修改不做任何保留，git status 查看工作区是没有记录的。</p><p>git reset –hard commit_id</p><h2 id="如何删除分支"><a href="#如何删除分支" class="headerlink" title="如何删除分支"></a>如何删除分支</h2><p>git branch -D branch</p><p>git push origin –delete branch</p><p>注：</p><p>git branch -d 会在删除前检查merge状态（其与上游分支或者与head）。<br>git branch -D 是git branch –delete –force的简写，它会直接删除。</p><h2 id="git如何删除未跟踪的文件呢？"><a href="#git如何删除未跟踪的文件呢？" class="headerlink" title="git如何删除未跟踪的文件呢？"></a>git如何删除未跟踪的文件呢？</h2><p>reset到某个版本，git checkout .无法删怎么办呢？</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.freecodecamp.org/chinese/news/gitignore-file-how-to-ignore-files-and-folders-in-git/">.gitignore参考</a></p><p><a href="https://git-scm.com/book/en/v2">git pro book</a></p><p><a href="https://www.jianshu.com/p/4c1ed3dbf421">rebase参考</a></p><p><a href="https://womanonrails.com/git-rebase-onto">rebase onto参考</a></p><p><a href="https://www.gss.com.tw/blog/%E4%BD%BF%E7%94%A8-git-rebase-interactive-%E6%A8%A1%E5%BC%8F%E6%95%B4%E7%90%86-commit">rebase -i</a></p><p><a href="https://www.gss.com.tw/blog/%E4%BD%BF%E7%94%A8-git-rebase-interactive-%E6%A8%A1%E5%BC%8F%E6%95%B4%E7%90%86-commit">rebase -i</a></p><p><a href="https://www.geeksforgeeks.org/git-squash/">squash</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://telegraph-image-5gr.pages.dev/file/8d9fb7979c933de38b530.jpg&quot; alt=&quot;tidy desk&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; </summary>
      
    
    
    
    <category term="git" scheme="https://alcuin1.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://alcuin1.github.io/tags/git/"/>
    
    <category term="版本管理" scheme="https://alcuin1.github.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2023 年度总结</title>
    <link href="https://alcuin1.github.io/2023/12/28/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://alcuin1.github.io/2023/12/28/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-28T12:10:32.000Z</published>
    <updated>2024-01-05T05:39:28.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年度总结"><a href="#2023年度总结" class="headerlink" title="2023年度总结"></a>2023年度总结</h1><p>不知不觉就又到年末了，今天是28号，再有几天就到了新的一年2024年了，这一年是自己完整地工作的第一年，感觉时间过的很快，自己已经真正的从学生变成一个打工人了，熟悉了早晚出勤的生活状态，熟悉了工作日上班，周末休息的标准两点一线生活。</p><p>感觉博客是个好东西，能留下来很多想法，所以就想自己记录一下。</p><h2 id="关键词：稳健成长"><a href="#关键词：稳健成长" class="headerlink" title="关键词：稳健成长"></a>关键词：稳健成长</h2><p>给自己一个贴切的年度关键词。这就像一本书的目录，能够让你快速想起之后的事情。</p><ul><li>健康自律</li><li>减肥成功</li><li>记录博客</li><li>直面挫折</li></ul><h2 id="1-学习成长"><a href="#1-学习成长" class="headerlink" title="1.学习成长"></a>1.学习成长</h2><p>更加自律，更加成熟，更加懂得自己想要什么。</p><h2 id="2-体验突破、娱乐休闲"><a href="#2-体验突破、娱乐休闲" class="headerlink" title="2.体验突破、娱乐休闲"></a>2.体验突破、娱乐休闲</h2><p>描述本年度在该维度下的成长或变化</p><p>第一次深圳路人局露营</p><p>第一次福田徒步运动</p><p>第一次拥有大疆无人机并炸机(bushi</p><p><img src="https://telegraph-image-5gr.pages.dev/file/41d7f39a5eabef83e9c19.png" alt="DJI"></p><p>第一次深圳大鹏户外烧烤</p><p>第一次去香港迪士尼</p><p>第一次看演唱会</p><p>第一次八个小时的自驾</p><p><img src="https://telegraph-image-5gr.pages.dev/file/2a1dd06ffe5d091f90ecf.png" alt="自驾"></p><p>第一次攀岩</p><p><img src="https://telegraph-image-5gr.pages.dev/file/96cb967602ec75c78fb64.jpg" alt="攀岩🧗🏻‍♀️"></p><p>第一次一个人做手术和拔牙 (22年11月与23年2月</p><p>第一次带老妈去广州、珠海、香港、澳门旅游，体验不同城市的感觉</p><p>第一次看司庆篮球赛</p><p>第一次工作之后再次见到多年没见老同学</p><p>第一次写博客</p><p>第一次体验正念</p><p>第一次见和女朋友一起见双方父母</p><p>第一次利用公司平台与行家大佬咨询摄影，减肥，自我成长等等</p><h2 id="3-工作事业"><a href="#3-工作事业" class="headerlink" title="3.工作事业"></a>3.工作事业</h2><p>今年在是完整工作的的第一年，逐渐适应了每天两点一线的生活，也要学会积极去面对工作中的挫折与不顺心</p><p>建立自己的职业壁垒</p><p>逐步形成个人IP</p><h2 id="4-家庭生活"><a href="#4-家庭生活" class="headerlink" title="4.家庭生活"></a>4.家庭生活</h2><p>学会如何处理亲密关系，如何更好地去爱自己在意的人。感情双方付出都是有意义的，遇到困难不能轻易放弃而是互相支持鼓励，双方一起的付出，将来是一定会有回报的。</p><p>珍惜与父母的联系，多关心爱护，心怀感恩，报答他们。同时也要理解到每一代人都是有代沟的，很多观念都是不能说服对方的，承认这一点很重要。</p><h2 id="5-身心健康"><a href="#5-身心健康" class="headerlink" title="5.身心健康"></a>5.身心健康</h2><p>今年看了看运动记录，相较于去年真的自律了很多，尤其是在后面颈椎不舒服以后，就提升了运动频率，尤其在下半年，每周坚持去运动至少两个小时，而且平时也会走路下班，健康了很多。</p><p><img src="https://telegraph-image-5gr.pages.dev/file/f736f41bde3e68ba82ec7.png" alt="健康"></p><h2 id="6-收支理财"><a href="#6-收支理财" class="headerlink" title="6.收支理财"></a>6.收支理财</h2><p>今年理财收益越有6k元，虽然不太多，但是也有在努力认真的攒钱呀</p><h2 id="7-人际社交"><a href="#7-人际社交" class="headerlink" title="7.人际社交"></a>7.人际社交</h2><p>出来深圳以后，和朋友的联系变少了很多，去年刚来到这里，还会主动去参加一些社交活动，后面发现挺累的，维持几段高质量的亲密关系真的需要付出很多精力，后面慢慢的还是更加专注在自我提升。</p><h2 id="8-反思与教训"><a href="#8-反思与教训" class="headerlink" title="8.反思与教训"></a>8.反思与教训</h2><p>工作上定期反思，积极主动，学会挑战自己的极限</p><p>生活上不要贪图便宜，经常用的一定要买好的</p><p>平时要多拍照纪念和留念每一个值得回忆的画面，保留美好的瞬间</p><h2 id="总结与期待"><a href="#总结与期待" class="headerlink" title="总结与期待"></a>总结与期待</h2><p>给自己的这一年写一段总结：</p><p>今年总体来说，平安健康，越来越有社会打工人的样子了，越来越自律，珍惜感情，注重自我提升。</p><p>而且面对挫折困难时，要抗住压力。人生不可能总是一帆风顺的，再大的困难，放到面前，也什么大不了的，学会与自己和解。</p><p>明年的flags：</p><ul><li>每周都要坚持运动2小时</li><li>制定目标，并且将其拆分为小目标，细分每个月，甚至半个月，一个一个来</li><li>每个月至少1-2篇文章输出(技术成长or其他方面</li><li>学习两个新的技能（滑雪、摄影、航拍、popping、唱歌、冲浪等等</li><li>探索至少两个新大陆（西北、北京、上海等等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年度总结&quot;&gt;&lt;a href=&quot;#2023年度总结&quot; class=&quot;headerlink&quot; title=&quot;2023年度总结&quot;&gt;&lt;/a&gt;2023年度总结&lt;/h1&gt;&lt;p&gt;不知不觉就又到年末了，今天是28号，再有几天就到了新的一年2024年了，这一年是自己完整地工</summary>
      
    
    
    
    <category term="年度总结" scheme="https://alcuin1.github.io/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="summary" scheme="https://alcuin1.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>数据备份</title>
    <link href="https://alcuin1.github.io/2023/12/23/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    <id>https://alcuin1.github.io/2023/12/23/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</id>
    <published>2023-12-23T15:21:51.000Z</published>
    <updated>2023-12-23T16:14:37.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>前两天用完自己的古董机械移动硬盘时，在弹出硬件时卡顿了，然后就直接给拔掉了。今天再插上去一看，磁盘结构文件损坏。。。</p><p><img src="https://telegraph-image-5gr.pages.dev/file/0c1f087fdccbf90d0e411.png" alt="磁盘结构文件损坏"></p><p>这下完了，用了8年的移动硬盘，里面一堆数据都没了，虽然都是一些老照片资料存储啥的吧，但是也都是宝贵的记忆啊，怎么办呢？线下看看哪里能恢复数据吧</p><p>后来网上找到了个工具</p><p>DiskGenius，原名DiskMan，是一款集资料恢复、资料备份还原及磁盘分割管理三大主要功能的工具软件，以共享软件形式发行，其分割管理功能免费提供使用，但资料恢复、资料备份还原功能则需付费使用。</p><p>怀着好奇心下载了下来，扫描了一下，发现确实能找到之前的数据！！！还有之前删除掉的数据都有！！！于是赶紧充值注册软件把所有找到的文件都给拷贝出来了。由于空间不足，立马打开京东搜索移动硬盘，在选择的时候遇到了一些问题。</p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li>冷热存储。如果数据需要长期存储，不经常读写，适合机械硬盘，因为其冷存储能力很强，十年以上也不会丢失，但是SSD 大约一两年就会丢数据。现代机械硬盘大约 22 年后磁记录强度会衰减 20%（某大佬给出的数据）</li><li>可找回性。而且固态硬盘如果数据丢失基本是找不回来了，但是机械硬盘通过工具有较大概率可以找回</li><li>读写需求。如果数据频繁读写，对读写速度有要求，适合固态移动硬盘，因为其速度真的很快</li><li>预算。这个就不用说了，有钱上固态，没钱移动硬盘</li><li>物理稳定性。固态硬盘相较于机械硬盘抗震能力更强</li></ul><h2 id="3-结论"><a href="#3-结论" class="headerlink" title="3.结论"></a>3.结论</h2><p>数据安全不能依靠硬盘厂商，一定要双盘阵列容灾，一定要买支持raid1的硬盘盒，在这个前提下买大厂产品即可<br>文件低频使用的话硬盘盒足矣，高频使用或者预算充足建议买nas了，一样还是得组raid1</p><p>其次就是，硬盘如果长期保持通电状态，会产生由于电器元件和机械部件老化造成的损坏。而在断电状态下，SSD 大约一两年就会丢数据，现代机械硬盘大约 22 年后磁记录强度会衰减 20%。</p><p>所以，参考司内大佬给出合理的离线数据保存方案是：</p><p>1、用机械硬盘，断电存储<br>2、至少双重备份，重要数据至少在两块硬盘上各存一份，也可以多一个网盘备份<br>3、每隔 10 年把硬盘上的文件进行一次读取-重写入，重置磁记录强度</p><p>又或者通过冷热分层存储的方式<br>1、即时数据：存放在自己的Mac上，使用Sync thing或者rsync备份到NAS或者其他电脑<br>2、热数据：例如15-90天内的照片，视频，有可能被用于冲印或者剪辑的数据存放在NAS里面. Raid 6 或者 Raid 10来保证数据安全<br>3、冷数据：超过90天以上的数据，可以用Rclone或者腾讯云SDK备份COS和CBS.进行存储. 同时准备磁带存储阵列. 存放到磁带存储中</p><p>当然这里还有线上的保存方案，比如私有云<a href="https://www.synology.cn/">群晖Synology</a>NAS，百度云，腾讯微盘，oneDrive，googleDrive，<a href="https://cloud.tencent.com/document/product/436/53482">腾讯cos对象存储</a>，iCloud等等。</p><p>1.加密备份一份存到腾讯云COS的深度归档，来避免本地固态丢失或者损坏的情况。深度归档1TB1个月只需要10元钱，上传不需要钱。<br>2.鉴于网盘有一定被和谐风险，可以按年月或主题划分若干目录，7zip 带文件名加密选项、分卷压缩，然后上传到 微云 等，保存压缩密码。<br>3.手机自带的各种☁️，比如iCloud，华为云等等</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzA4NDk5OTgzMg==&mid=2650591412&idx=1&sn=2ba4ed0f01311c2ad3add2a3b8257f48&chksm=87d6db43b0a152555ca8209faf4ee9741eaaa335da67276b7b0105d62214ce4d7d658b1e6bd4&cur_album_id=1958397433973997575&scene=189#wechat_redirect">PKM 实证连载 Vol.01：我的家庭数据五重备份系统</a></p><p><a href="https://post.smzdm.com/p/arqv3x6q/">SSD闲置多年会丢失数据吗？如何保证固态硬盘断电后的数据安全？</a></p><p><a href="https://www.zhihu.com/question/20296398">磁带相对于硬盘存储的优势在哪？(狗头</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据备份&quot;&gt;&lt;a href=&quot;#数据备份&quot; class=&quot;headerlink&quot; title=&quot;数据备份&quot;&gt;&lt;/a&gt;数据备份&lt;/h1&gt;&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="数据" scheme="https://alcuin1.github.io/categories/%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="数据" scheme="https://alcuin1.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Go反射</title>
    <link href="https://alcuin1.github.io/2023/12/17/go%E5%8F%8D%E5%B0%84/"/>
    <id>https://alcuin1.github.io/2023/12/17/go%E5%8F%8D%E5%B0%84/</id>
    <published>2023-12-17T15:45:05.000Z</published>
    <updated>2024-03-10T02:43:24.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go反射"><a href="#go反射" class="headerlink" title="go反射"></a>go反射</h1><h2 id="1-两个核心"><a href="#1-两个核心" class="headerlink" title="1.两个核心"></a>1.两个核心</h2><ul><li><p>reflect.Value</p><p>  用于操作值，部分值可以被反射修改</p></li><li><p>reflect.Type</p><p>  用于操作类信息，类信息是只能读取</p></li></ul><p>reflect.Type可以通过reflect.Value得到，但是反过来不行。</p><h2 id="2-reflect-Kind"><a href="#2-reflect-Kind" class="headerlink" title="2.reflect Kind"></a>2.reflect Kind</h2><p>Kind是一个枚举值，用来判断操作的对应类型，比如指针、数组、切片等等，如果调用的不对，它就只panic。</p><h2 id="3-field"><a href="#3-field" class="headerlink" title="3.field"></a>3.field</h2><h2 id="4-func"><a href="#4-func" class="headerlink" title="4.func"></a>4.func</h2><h2 id="5-遍历"><a href="#5-遍历" class="headerlink" title="5.遍历"></a>5.遍历</h2><h2 id="3-通过TDD来进行测试写逻辑"><a href="#3-通过TDD来进行测试写逻辑" class="headerlink" title="3.通过TDD来进行测试写逻辑"></a>3.通过TDD来进行测试写逻辑</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;go反射&quot;&gt;&lt;a href=&quot;#go反射&quot; class=&quot;headerlink&quot; title=&quot;go反射&quot;&gt;&lt;/a&gt;go反射&lt;/h1&gt;&lt;h2 id=&quot;1-两个核心&quot;&gt;&lt;a href=&quot;#1-两个核心&quot; class=&quot;headerlink&quot; title=&quot;1.两个核</summary>
      
    
    
    
    <category term="Go" scheme="https://alcuin1.github.io/categories/Go/"/>
    
    
    <category term="go" scheme="https://alcuin1.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>图床使用</title>
    <link href="https://alcuin1.github.io/2023/12/03/%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://alcuin1.github.io/2023/12/03/%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2023-12-03T06:09:59.000Z</published>
    <updated>2023-12-31T17:04:46.038Z</updated>
    
    <content type="html"><![CDATA[<p>先看看效果？</p><p><img src="https://2ae6fba4.telegraph-image-5gr.pages.dev/file/d8fa252ebe3ed81d76095.jpg" alt="jerek"></p><p>照片清晰度 还是不错的哈，不太清楚压缩没压缩。</p><p>b站手把手讲解：<a href="https://www.bilibili.com/video/BV13N411z7Lu">https://www.bilibili.com/video/BV13N411z7Lu</a></p><p>1.<a href="https://github.com/cf-pages/Telegraph-Image">https://github.com/cf-pages/Telegraph-Image</a></p><p>fork一个，然后看md教程即可</p><p>2.<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><p>新建账户</p><p>3.其余按照步骤设置即可</p><p>connect github账户，新建kv，设置img_url，最后就是admin管理端的账户密码，设置好就可以使用啦，总体感觉还是很方便的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先看看效果？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2ae6fba4.telegraph-image-5gr.pages.dev/file/d8fa252ebe3ed81d76095.jpg&quot; alt=&quot;jerek&quot;&gt;&lt;/p&gt;
&lt;p&gt;照片清晰度 还是不错的哈，不</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://alcuin1.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="blog" scheme="https://alcuin1.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="https://alcuin1.github.io/2023/12/01/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://alcuin1.github.io/2023/12/01/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-12-01T15:16:35.000Z</published>
    <updated>2024-03-10T02:09:51.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>作为一名技术工程师，出于知识积累记录自己成长方面的原因，来搭建一个属于自己的博客，这里会放一些技术相关以及阅读笔记，以及一些自己的想法等等</p><h2 id="搭建的三种途径"><a href="#搭建的三种途径" class="headerlink" title="搭建的三种途径"></a>搭建的三种途径</h2><ul><li>手写前端+后端，买一台服务器，然后部署上面</li></ul><p>优点：个性化强<br>缺点：对小白不友好</p><ul><li>通过github以及vercel进行联动部署，本地仓库写好博客以后推送到git平台自动化部署即可</li></ul><p>优点：操作简单，可以专注于博客内容<br>缺点：待补充…</p><ul><li>通过vercel与第三方组件联动，比如notion等知识管理工具</li></ul><p>优点：操作极其简单<br>缺点：待补充…</p><h2 id="搭建指南"><a href="#搭建指南" class="headerlink" title="搭建指南"></a>搭建指南</h2><p>这里主要介绍一下通过github来进行搭建的教程</p><p>安装node.js <a href="https://nodejs.org/en/download/">官网</a></p><p>安装hexo，通过nmp -v 检验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>三连操作：新建文章+生成+预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级</p><p>命令简写<br>hexo n “我的博客” &#x3D;&#x3D; hexo new “我的博客” #新建文章<br>hexo g &#x3D;&#x3D; hexo generate #生成<br>hexo s &#x3D;&#x3D; hexo server #启动服务预览<br>hexo d &#x3D;&#x3D; hexo deploy #部署</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p><p>hexo new post article 创建一个名称为 article 的文章<br>hexo new page about 创建一个名称为 about 的路由页面</p><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master</p><h2 id="安装Git部署插件"><a href="#安装Git部署插件" class="headerlink" title="安装Git部署插件"></a>安装Git部署插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改完_config.yml之后的发布四连：</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>只要前期在github配置部署好了，那么就默默等待你的文章上线吧~！！</p><h2 id="如何多端同步构建博客呢？-待补充"><a href="#如何多端同步构建博客呢？-待补充" class="headerlink" title="如何多端同步构建博客呢？(待补充)"></a>如何多端同步构建博客呢？(待补充)</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://markdown.com.cn/basic-syntax/">MarkDown基本语法</a></p><p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></p><p><a href="https://hexo.io/themes/">Hexo Themes</a></p><p><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">Hexo使用攻略</a></p><p><a href="https://www.cnblogs.com/guoapeng/p/17627621.html">Hexo博客添加评论功能</a></p><p><a href="https://www.cnblogs.com/guoapeng/p/17627623.html">Hexo博客搜索引擎优化</a></p><p><a href="https://chrischen0405.github.io/2018/09/11/post20180911/">hexo页脚添加访客人数和总访问量</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;作为一名技术工程师，出于知识积累记录自己成长方面的原因，来搭建一个属于自己的博客，这里会放一些技术相关以及阅读笔记，以及一些自己的想法等等&lt;</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://alcuin1.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="blog" scheme="https://alcuin1.github.io/tags/blog/"/>
    
    <category term="hexo" scheme="https://alcuin1.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
